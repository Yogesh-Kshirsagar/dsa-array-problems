Explanation:
Two-pointer approach:

We use two indices: i and j.
i points to the position where the next valid (non-val) element should be placed.
j iterates through all the elements in the array to check if they are equal to val.

Logic:
If nums[j] is not equal to val, we move it to position i and increment i.
This ensures that all elements that are not equal to val are shifted to the front, and i represents the number of such elements.

Return:
After the loop finishes, i will give the number of elements in the array that are not equal to val. The array itself will have these elements in the first i positions.

Example Walkthrough:
Example 1:
int[] nums = {3, 2, 2, 3};
int val = 3;
Solution solution = new Solution();
int k = solution.removeElement(nums, val);
System.out.println(k);  // Output: 2
// After processing, nums will be [2, 2, _, _], where _ represents ignored elements

Example 2:
int[] nums = {0, 1, 2, 2, 3, 0, 4, 2};
int val = 2;
Solution solution = new Solution();
int k = solution.removeElement(nums, val);
System.out.println(k);  // Output: 5
// After processing, nums will have the first five elements as [0, 1, 3, 0, 4]
Key Points:
The array nums will be modified in place, and the elements that are not equal to val will be placed in the first k positions.

The rest of the array beyond index k-1 can contain any values, so they are ignored.

The time complexity is O(n), where n is the length of the array.

The space complexity is O(1), since we are only using a few extra variables.

This solution should work for your DSA problem and should be optimal in terms of both time and space.