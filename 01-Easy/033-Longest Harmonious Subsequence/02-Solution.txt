Key Insight:
A harmonious subsequence is made from numbers x and x + 1 (or x - 1), since the difference between max and min must be exactly 1.
Count the frequency of all elements.
For each unique number x, if x + 1 exists in the map, the possible harmonious subsequence length is freq[x] + freq[x + 1].

Step-by-Step Plan:
Count the frequency of each element using a HashMap.
Iterate through the keys.
For each key k, check if k + 1 exists.
If it does, update the maxLength as freq[k] + freq[k + 1].
Return maxLength.

Example Walkthrough:
Input: [1,3,2,2,5,2,3,7]
Frequencies:

1 → 1
2 → 3
3 → 2
5 → 1
7 → 1
Pairs:

1 & 2 → 1 + 3 = 4
2 & 3 → 3 + 2 = 5
3 & 4 → 4 doesn't exist
5 & 6 → 6 doesn't exist
7 & 8 → 8 doesn't exist
Output: 5

✅ Time and Space Complexity:
Time: O(n) — single pass to count, and another pass to check pairs.
Space: O(n) — to store frequency map.

