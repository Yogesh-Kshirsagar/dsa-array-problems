To solve this problem, we are tasked with merging two sorted arrays, nums1 and nums2, into a single sorted array. The challenge is that nums1 already has enough space (with m + n elements) to accommodate all elements from both nums1 and nums2. The solution should modify nums1 in-place, without returning a new array.

Approach:
We will use the two-pointer technique starting from the end of both nums1 and nums2. The key idea is to place the largest elements in the correct position starting from the end of nums1:

Pointers Initialization:
i: Points to the last valid element in nums1 (i.e., m - 1).
j: Points to the last element in nums2 (i.e., n - 1).
k: Points to the last position in nums1 (i.e., m + n - 1).

Merge Process:
We compare elements from nums1 and nums2 (starting from the end).
Place the larger of nums1[i] and nums2[j] at nums1[k] and move the respective pointer (i, j, or k) accordingly.
Continue this process until either all elements from nums1 or all elements from nums2 are processed.

Remaining Elements:
If there are any remaining elements in nums2 (i.e., j >= 0), they need to be copied to nums1 since nums1's elements are already in place.
If any elements remain in nums1, they are already correctly placed.

Edge Cases:
If nums2 is empty (n == 0), nums1 remains unchanged.
If nums1 is empty (m == 0), simply copy all elements of nums2 into nums1.
If both arrays are empty, the result will be an empty array.

Explanation of the Code:
Pointers Initialization:
i = m - 1: Points to the last valid element in nums1.
j = n - 1: Points to the last element in nums2.
k = m + n - 1: Points to the last position in nums1 where the merged elements will be placed.

Merging Logic:
The while loop compares nums1[i] and nums2[j]. The larger value is placed at nums1[k], and the corresponding pointer (i, j, or k) is decremented.
This continues until one of the arrays (nums1 or nums2) is exhausted.

Handling Remaining Elements:
After the main loop, if any elements remain in nums2 (i.e., j >= 0), they are copied into nums1 (since nums1 already has its elements in place).
No need to check for remaining elements in nums1 because they are already correctly placed.

Test Cases:
Test Case 1: Merges [1, 2, 3] and [2, 5, 6] into [1, 2, 2, 3, 5, 6].
Test Case 2: Merges [1] and [] (empty array) into [1].
Test Case 3: Merges [0] and [1] into [1].

Time Complexity:
O(m + n), where m and n are the lengths of nums1 and nums2 respectively. We iterate through each element of both arrays once.

Space Complexity:
O(1), because we are modifying nums1 in place without using extra space, except for a few pointers.

Conclusion:
This approach is efficient, with a time complexity of O(m + n), which is optimal for merging two sorted arrays. It avoids using extra space and performs the merge in-place.