To solve this problem efficiently with O(log n) runtime complexity, we need to use a binary search algorithm. Given that the array is sorted and contains distinct integers, binary search is the perfect fit for this task.

Problem Breakdown:
If the target is found in the array, return its index.

If the target is not found, return the index where it would be inserted to maintain the sorted order.

Approach:
Binary Search:

We will use a binary search to either find the target or determine where the target would fit in the sorted array.

In each step of the binary search, we compare the target with the middle element of the current search range:

If the target is equal to the middle element, return its index.

If the target is smaller, search the left half.

If the target is larger, search the right half.

If we finish the binary search and haven't found the target, the left pointer will point to the position where the target should be inserted.

Algorithm:
Initialize two pointers: left at the beginning of the array and right at the end.

Perform binary search:

Calculate the middle index mid = left + (right - left) / 2.

If nums[mid] == target, return mid.

If nums[mid] > target, adjust the search range to the left half by setting right = mid - 1.

If nums[mid] < target, adjust the search range to the right half by setting left = mid + 1.

After the binary search, if the target is not found, left will be the correct insertion index.

Explanation:
Binary Search Loop:

We initialize left as 0 and right as the last index (nums.length - 1).

In each iteration, calculate mid as the middle index.

If the value at nums[mid] is equal to target, we return the index mid.

If nums[mid] > target, move the right pointer to mid - 1, narrowing the search to the left half.

If nums[mid] < target, move the left pointer to mid + 1, narrowing the search to the right half.

Return the Insertion Index:

Once the while loop ends, left will be the position where the target should be inserted.

This is because if the target isn't found, the left pointer will indicate the first position where the target is less than the element at that index, thus the correct insertion position.

Example Walkthrough:
Example 1:
int[] nums = {1, 3, 5, 6};
int target = 5;
Solution solution = new Solution();
int index = solution.searchInsert(nums, target);
System.out.println(index);  // Output: 2
The target 5 is found at index 2, so we return 2.

Example 2:
int[] nums = {1, 3, 5, 6};
int target = 2;
Solution solution = new Solution();
int index = solution.searchInsert(nums, target);
System.out.println(index);  // Output: 1
The target 2 is not in the array, but it should be inserted at index 1 (between 1 and 3).

Example 3:
int[] nums = {1, 3, 5, 6};
int target = 7;
Solution solution = new Solution();
int index = solution.searchInsert(nums, target);
System.out.println(index);  // Output: 4
The target 7 is greater than all elements in the array, so it should be inserted at the end, index 4.

Time Complexity:
Time Complexity: O(log n), because we are halving the search space with each iteration of binary search.

Space Complexity: O(1), since we only use a few variables to store the left, right, and mid indices.

Conclusion:
This solution works efficiently with O(log n) time complexity, which is optimal for this problem, given the constraint of using binary search.