Solution Approach: Prefix Sum
Prefix Sum Concept:
A prefix sum array is an auxiliary array where each element at index i represents the sum of all elements from the start of the array to index i.
This allows us to compute the sum of any subarray in constant time O(1) by leveraging the following relationship:
  sumRange(left, right) = prefixSum[right] - prefixSum[left - 1]
If left is 0, then the sum is just prefixSum[right].

Time Complexity:
O(n) for constructing the prefix sum array during initialization.
O(1) for each sumRange query.

Space Complexity:
O(n) for storing the prefix sum array.

Explanation:
Initialization (NumArray(int[] nums)):
  We first create an array prefixSum of size n + 1 (one extra element to handle the base case where left = 0).
  We then populate this prefixSum array such that prefixSum[i] contains the sum of elements from nums[0] to nums[i-1].

Query (sumRange(int left, int right)):
  To compute the sum from left to right, we simply subtract prefixSum[left] from prefixSum[right + 1].

Example Walkthrough:
For nums = [-2, 0, 3, -5, 2, -1]:

Prefix sum calculation:
  prefixSum[0] = 0 (base case)
  prefixSum[1] = -2 (sum from index 0 to 0)
  prefixSum[2] = -2 + 0 = -2 (sum from index 0 to 1)
  prefixSum[3] = -2 + 3 = 1 (sum from index 0 to 2)
  prefixSum[4] = 1 + (-5) = -4 (sum from index 0 to 3)
  prefixSum[5] = -4 + 2 = -2 (sum from index 0 to 4)
  prefixSum[6] = -2 + (-1) = -3 (sum from index 0 to 5)

So, the prefix sum array is: [0, -2, -2, 1, -4, -2, -3].

Query 1: sumRange(0, 2):
  prefixSum[3] - prefixSum[0] = 1 - 0 = 1.
  Result: 1.

Query 2: sumRange(2, 5):
  prefixSum[6] - prefixSum[3] = -3 - 1 = -1.
  Result: -1.

Query 3: sumRange(0, 5):
  prefixSum[6] - prefixSum[0] = -3 - 0 = -3.
  Result: -3.

Time and Space Complexity:
Time	O(n) for initialization, O(1) per query
Space	O(n) for the prefix sum array